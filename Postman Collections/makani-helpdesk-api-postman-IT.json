{
	"info": {
		"_postman_id": "a2bf1c5f-7f32-4a72-a698-f13830735c13",
		"name": "makani-helpdesk-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication Workflow",
			"item": [
				{
					"name": "LOGIN-INTERNAL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8dd18529-b65e-407b-ade9-1de35373c8b8",
								"exec": [
									"// Ensure the request was successful (HTTP Status 200 OK)",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response body is JSON",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Parse the JSON response",
									"const responseData = pm.response.json();",
									"",
									"// Check if the 'token' property exists in the response",
									"pm.test(\"Response has 'token' property\", function () {",
									"    pm.expect(responseData).to.have.property('token');",
									"});",
									"",
									"// Store the token in an environment variable",
									"if (responseData && responseData.token) {",
									"    // Set the environment variable 'authToken'",
									"    pm.environment.set(\"authToken\", responseData.token);",
									"    console.log(\"Authentication Token stored: \" + responseData.token.substring(0, 20) + \"...\"); // Log a snippet",
									"} else {",
									"    console.error(\"Could not find 'token' in the response.\");",
									"    pm.test(\"Token was not found in response\", false); // Fail the test if token is missing",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fe912c9b-2e56-4e6f-8bd6-fb00b5b4ee12",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"pass1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/helpdesk/security/login/internal"
					},
					"response": []
				}
			],
			"id": "1d5da659-f642-4fa8-930e-90d6bd5c729a",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c74d831a-329b-402b-bbb1-bee053d8dd0e",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// --- Configuration ---",
							"const loginRequestName = \"LOGIN-INTERNAL\"; // Name of your login request in Postman",
							"const validateTokenRequestName = \"Get User Info\"; // Name of a simple authenticated GET request (e.g., /user/me)",
							"",
							"// --- Logic ---",
							"pm.sendRequest({",
							"    // Make sure this URL is correct for checking token validity",
							"    url: pm.request.url.host + ':8080/helpdesk/people/employees/1', // Example: a simple GET that requires authentication",
							"    method: 'GET',",
							"    header: {",
							"        'Authorization': `Bearer ${pm.environment.get(\"authToken\")}` // FIX IS HERE: Backticks for the value string",
							"    }",
							"}, function (err, res) {",
							"    if (err) {",
							"        console.error(\"Network or request error during token validation:\", err);",
							"        // Handle network error, try re-login",
							"        pm.sendRequest(pm.collection.getByName(loginRequestName), function(loginErr, loginRes) { // Use pm.collection.getByName",
							"            if (loginErr) {",
							"                console.error(\"Error during automatic login:\", loginErr);",
							"                pm.test(\"Automatic login failed\", false);",
							"            } else if (loginRes.code !== 200) {",
							"                console.error(\"Automatic login returned status:\", loginRes.code, loginRes.json());",
							"                pm.test(\"Automatic login failed\", false);",
							"            } else {",
							"                console.log(\"Automatic login successful!\");",
							"            }",
							"        });",
							"    } else {",
							"        console.log(\"attempt to login...\");",
							"        // Check if the response status indicates an invalid/expired token",
							"        if (res.code === 401 || res.code === 403) {",
							"            console.log(\"Token invalid or expired. Re-authenticating...\");",
							"            // Trigger the login request",
							"            pm.sendRequest(pm.collection.getByName(loginRequestName), function(loginErr, loginRes) { // Use pm.collection.getByName",
							"                if (loginErr) {",
							"                    console.error(\"Error during automatic login:\", loginErr);",
							"                    pm.test(\"Automatic login failed\", false);",
							"                } else if (loginRes.code !== 200) {",
							"                    console.error(\"Automatic login returned status:\", loginRes.code, loginRes.json());",
							"                    pm.test(\"Automatic login failed\", false);",
							"                } else {",
							"                    console.log(\"Automatic login successful! New token stored.\");",
							"                }",
							"            });",
							"        } else if (res.code === 200) {",
							"            console.log(\"Existing token is valid.\");",
							"        } else {",
							"            console.log(\"Unexpected response from validation endpoint (Status: \" + res.code + \"). Assuming token might be invalid. Attempting re-login.\");",
							"            // Fallback to re-login if validation is inconclusive",
							"            pm.sendRequest(pm.collection.getByName(loginRequestName)); // Use pm.collection.getByName",
							"        }",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2d44fa68-c277-4ae9-b986-b9ff8628322a",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "employee",
			"item": [
				{
					"name": "GetEmployeeByIdResponse200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d7c077d-f8d4-4389-8862-eef747e5a867",
								"exec": [
									"// Post-response Tests for 'GET Employee by ID - 200 OK'",
									"",
									"// Test 1: Verify Status Code is 200",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test 2: Verify Response is JSON",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Test 3: Verify Response body matches GetEmployeeResponseDTO structure and content",
									"pm.test(\"Response body matches GetEmployeeResponseDTO structure\", function () {",
									"    const responseJson = pm.response.json();",
									"    const requestedId = pm.environment.get(\"entityId\"); // Get the ID used in the request",
									"",
									"    // Basic structure and type checks for required fields",
									"    pm.expect(responseJson).to.be.an('object', 'Response should be an object');",
									"    pm.expect(responseJson).to.have.property('employeeId').and.to.be.a('number', 'employeeId should be a number');",
									"    pm.expect(responseJson.employeeId).to.eql(parseInt(requestedId), 'Returned employeeId should match the requested ID');",
									"    pm.expect(responseJson).to.have.property('firstName').and.to.be.a('string', 'firstName should be a string');",
									"    pm.expect(responseJson).to.have.property('lastName').and.to.be.a('string', 'lastName should be a string');",
									"    pm.expect(responseJson).to.have.property('email').and.to.be.a('string', 'email should be a string');",
									"    pm.expect(responseJson).to.have.property('phone').and.to.be.a('string', 'phone should be a string');",
									"    pm.expect(responseJson).to.have.property('address').and.to.be.a('string', 'address should be a string');",
									"    pm.expect(responseJson).to.have.property('zipCode').and.to.be.a('string', 'zipCode should be a string');",
									"    pm.expect(responseJson).to.have.property('birthDate').and.to.be.a('string', 'birthDate should be a string (YYYY-MM-DD)');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c086f944-c5f7-4797-8e62-322396702805",
								"exec": [
									"pm.environment.set(\"entityId\", 1);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fc93333c-09f0-4645-94b4-9808c8fe9d05",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/people/employees/{{entityId}}"
					},
					"response": []
				},
				{
					"name": "GetEmployeeByIdResponse404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "26537b75-b4b8-41a5-904a-a29b6f799a21",
								"exec": [
									"pm.environment.set(\"entityId\", 1000);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a78ea244-19a4-4232-b2d6-14af8585b080",
								"exec": [
									"// Post-response Tests for 'GET Employee by ID - 404 Not Found'",
									"",
									"// Test 1: Verify Status Code is 404",
									"pm.test(\"Status code is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test 2: Verify Response is JSON",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Test 3: Verify Response body matches ErrorResponseDTO structure",
									"pm.test(\"Response body matches ErrorResponseDTO structure\", function () {",
									"    const responseJson = pm.response.json();",
									"    const requestedId = pm.environment.get(\"entityId\"); // Get the ID used in the request",
									"",
									"    pm.expect(responseJson).to.be.an('object', 'Error response should be an object');",
									"    pm.expect(responseJson).to.have.property('message').and.to.be.a('string', 'Error message should be a string');",
									"    pm.expect(responseJson.message).to.eql(`Empleado con ID: ${requestedId} no existe!`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bb602944-4e1d-4862-b713-737ae3fb4bc7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/people/employees/{{entityId}}"
					},
					"response": []
				},
				{
					"name": "GetAllEmployeesResponse200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ffa91204-b73d-4632-bfaf-599e68152ff1",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(employee => {",
									"        pm.expect(employee).to.have.all.keys('firstName', 'lastName', 'birthDate', 'email', 'phone', 'address', 'zipCode', 'employeeId');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(function(employee) {",
									"        pm.expect(employee.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"EmployeeId is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(employee) {",
									"        pm.expect(employee.employeeId).to.be.a('number').and.to.be.at.least(0, \"EmployeeId should be a non-negative integer\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fba27313-eaab-4ceb-bc1a-f56017893ea2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/people/employees"
					},
					"response": []
				},
				{
					"name": "CreateEmployeeResponse201",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56359429-cd21-4e83-9ee9-487578b70631",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('employeeId').that.is.a('number');",
									"});",
									"",
									"pm.test(\"Employee ID is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.employeeId).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1ef6a4a5-ed3c-456f-82fc-dd0c6ce91cb7",
								"exec": [
									"let entityDiffEmailCurrentNumber = parseInt(pm.environment.get(\"entityDiffEmail\")); // Convert to integer",
									"if (isNaN(entityDiffEmailCurrentNumber)) {",
									"    console.warn(\"entityDiffEmail was not a number.\");",
									"}",
									"pm.environment.set(\"entityDiffEmail\", entityDiffEmailCurrentNumber + 1);",
									"",
									"let entityDiffPhonenumberCurrentNumber = parseInt(pm.environment.get(\"entityDiffPhonenumber\")); // Convert to integer",
									"if (isNaN(entityDiffPhonenumberCurrentNumber)) {",
									"    console.warn(\"entityDiffPhonenumber was not a number.\");",
									"}",
									"pm.environment.set(\"entityDiffPhonenumber\", entityDiffPhonenumberCurrentNumber + 1);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7b6ee3b9-d829-4a6b-926b-9bcfca9f7cf0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"David\",\n  \"lastName\": \"martinez\",\n  \"birthDate\": \"2000-01-15\",\n  \"email\": \"david.martinez{{entityDiffEmail}}@example.com\",\n  \"phone\": \"666-456-{{entityDiffPhonenumber}}\",\n  \"address\": \"123 Main St\",\n  \"zipCode\": \"12345\",\n  \"employeeAuth\": {\n    \"employeeType\": \"Full-time\",\n    \"usernameToken\": \"john.doe\",\n    \"passwordToken\": \"securePassword\",\n    \"role\": \"CSR\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/helpdesk/people/employees"
					},
					"response": []
				},
				{
					"name": "CreateEmployeeResponse400DuplicateEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56359429-cd21-4e83-9ee9-487578b70631",
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has a message field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData.message).to.eql(\"Error, valor enviado en campo correo electronico ya esta registrado\")",
									"});",
									"",
									"",
									"pm.test(\"Message must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response schema is valid\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('message');",
									"    pm.expect(responseData.message).to.be.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1ef6a4a5-ed3c-456f-82fc-dd0c6ce91cb7",
								"exec": [
									"// Increment employeeDiffPhonenumber by 1 each time the request is made.",
									"",
									"let currentNumber = parseInt(pm.environment.get(\"entityDiffPhonenumber\")); // Convert to integer",
									"if (isNaN(currentNumber)) {",
									"    console.warn(\"entityDiffPhonenumber was not a number.\");",
									"}",
									"pm.environment.set(\"entityDiffPhonenumber\", currentNumber + 1);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8e6c0082-2cf1-4b26-a4e4-88c7c151b751",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Johnson\",\n  \"birthDate\": \"1990-05-15\",\n  \"email\": \"alice.j@example.com\",\n  \"phone\": \"123-456-{{entityDiffPhonenumber}}\",\n  \"address\": \"123 Main St\",\n  \"zipCode\": \"12345\",\n  \"skills\": \"Not specified\", \n  \"profilePicture\": \"\", \n  \"employeeAuth\": {\n    \"employeeType\": \"Full-time\",\n    \"usernameToken\": \"alice.johnson\",\n    \"passwordToken\": \"securePass\",\n    \"role\": \"USER\" \n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/helpdesk/people/employees"
					},
					"response": []
				},
				{
					"name": "CreateEmployeeResponse400DuplicatePhoneNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56359429-cd21-4e83-9ee9-487578b70631",
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has a message field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData.message).to.eql(\"Error, valor enviado en campo numero de celular ya esta registrado\")",
									"",
									"});",
									"",
									"",
									"pm.test(\"Message must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response schema is valid\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('message');",
									"    pm.expect(responseData.message).to.be.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1ef6a4a5-ed3c-456f-82fc-dd0c6ce91cb7",
								"exec": [
									"// Increment employeeDiffEmail by 1 each time the request is made.",
									"",
									"let currentNumber = parseInt(pm.environment.get(\"entityDiffEmail\")); // Convert to integer",
									"if (isNaN(currentNumber)) {",
									"    console.warn(\"entityDiffEmail was not a number\");",
									"}",
									"pm.environment.set(\"entityDiffEmail\", currentNumber + 1);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f8d2a5a1-e30e-4f00-82b2-679c1e31f769",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Johnson\",\n  \"birthDate\": \"1990-05-15\",\n  \"email\": \"alice.j{{entityDiffEmail}}@example.com\",\n  \"phone\": \"123-456-7890\",\n  \"address\": \"123 Main St\",\n  \"zipCode\": \"12345\",\n  \"skills\": \"Not specified\", \n  \"profilePicture\": \"\", \n  \"employeeAuth\": {\n    \"employeeType\": \"Full-time\",\n    \"usernameToken\": \"alice.johnson\",\n    \"passwordToken\": \"securePass\",\n    \"role\": \"USER\" \n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/helpdesk/people/employees"
					},
					"response": []
				},
				{
					"name": "DeleteEmployeeResponse204",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0d226282-b726-4474-935a-4bb0af64cbe6",
								"exec": [
									"// Pre-request Script for DELETE /people/employees/{{employeeIdToDelete}}",
									"",
									"// --- Configuration ---",
									"// Adjust the path to your employee creation endpoint",
									"const CREATE_EMPLOYEE_URL = pm.environment.get(\"baseUrl\") + \"/people/employees\";",
									"// Assume the Authorization header is set at collection/folder level, or set it here too if needed",
									"const AUTH_TOKEN = pm.environment.get(\"authToken\");",
									"",
									"// --- Generate Unique Employee Data ---",
									"// Use a timestamp to ensure uniqueness for email and phone",
									"const timestamp = Date.now();",
									"const uniqueEmail = `delete_test_employee_${timestamp}@example.com`;",
									"const uniquePhone = `999-000-${timestamp.toString().slice(-4)}`; // Last 4 digits of timestamp",
									"",
									"const employeeData = {",
									"  \"firstName\": \"Delete\",",
									"  \"lastName\": \"Testuser\",",
									"  \"birthDate\": \"2000-01-01\",",
									"  \"email\": uniqueEmail,",
									"  \"phone\": uniquePhone,",
									"  \"address\": \"123 Delete Rd\",",
									"  \"zipCode\": \"00000\",",
									"  \"skills\": \"Temporary Delete User\",",
									"  \"profilePicture\": \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=\", // Minimal Base64",
									"  \"employeeAuth\": {",
									"    \"employeeType\": \"Contract\",",
									"    \"usernameToken\": `delete_test_${timestamp}`,",
									"    \"passwordToken\": \"DeletePass123\", // Needs to be hashed by backend",
									"    \"role\": \"USER\"",
									"  }",
									"};",
									"",
									"// --- Make the POST request to create the employee ---",
									"pm.sendRequest({",
									"    url: CREATE_EMPLOYEE_URL,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': `Bearer ${AUTH_TOKEN}`",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(employeeData)",
									"    }",
									"}, function (err, res) { // <-- The 'res' here holds the response of the internal POST",
									"    if (err) {",
									"        console.error(\"Pre-request: Network/Request Error during employee creation: \", err);",
									"        pm.test(\"Pre-request: Employee creation failed (network/request error)\", false);",
									"    } else {",
									"        // --- CRITICAL DEBUGGING LINES ---",
									"        console.log(\"Pre-request: Employee creation response status code:\", res.code);",
									"        console.log(\"Pre-request: Employee creation response body:\", res.json()); // Log the body",
									"        // --- END CRITICAL DEBUGGING LINES ---",
									"",
									"        if (res.code === 201) { // Check for successful creation (201 Created)",
									"            const createdEmployeeJson = res.json();",
									"",
									"            // Check if employeeId was returned",
									"            if (createdEmployeeJson && typeof createdEmployeeJson.employeeId === 'number') {",
									"                const entityIdToDelete = createdEmployeeJson.employeeId;",
									"                pm.environment.set(\"entityIdToDelete\", entityIdToDelete);",
									"                console.log(`Pre-request: Created employee with ID ${entityIdToDelete} for deletion.`);",
									"                pm.test(\"Pre-request: Employee creation successful (201)\", true); // Mark success",
									"            } else {",
									"                console.error(\"Pre-request: Employee creation succeeded (201) but missing employeeId in response.\");",
									"                pm.test(\"Pre-request: Employee creation failed (missing ID)\", false);",
									"            }",
									"        } else {",
									"            console.error(`Pre-request: Employee creation failed with status ${res.code}. Response:`, res.json());",
									"            pm.test(\"Pre-request: Employee creation failed for delete test\", false); // Original failure message",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bf12c01a-ac14-461b-a12d-3cd24bc891e1",
								"exec": [
									"pm.test(\"Response status code is 204\", function () {",
									"    pm.expect(pm.response.code).to.eql(204);",
									"});",
									"",
									"",
									"pm.test(\"Response has no content for successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Response body should be empty for DELETE request\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "11559ab0-eec8-49bd-94e1-98bcffdd9551",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "http://localhost:8080/helpdesk/people/employees/{{entityIdToDelete}}"
					},
					"response": []
				},
				{
					"name": "DeleteEmployeeResponse404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0d226282-b726-4474-935a-4bb0af64cbe6",
								"exec": [
									"// Pre-request Script for DELETE /people/employees/{{employeeIdToDelete}}",
									"//set the employeeIdToDelete to 0 to delete the employee with id 0 which doesnt exists",
									"pm.environment.set(\"entityIdToDelete\", 0);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bf12c01a-ac14-461b-a12d-3cd24bc891e1",
								"exec": [
									"// Post-response Tests for 'DELETE Employee by ID - 404 Not Found'",
									"",
									"// Test 1: Verify Status Code is 404",
									"pm.test(\"Status code is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test 2: Verify Response is JSON",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Test 3: Verify Response body matches ErrorResponseDTO structure",
									"pm.test(\"Response body matches ErrorResponseDTO structure\", function () {",
									"    const responseJson = pm.response.json();",
									"    const requestedId = pm.environment.get(\"entityIdToDelete\");",
									"",
									"    pm.expect(responseJson).to.be.an('object', 'Error response should be an object');",
									"    pm.expect(responseJson).to.have.property('message').and.to.be.a('string', 'Error message should be a string');",
									"",
									"    // Optional: Assert on specific error message content for 404",
									"    // Or if your API is very specific:",
									"     pm.expect(responseJson.message).to.eql(`Empleado con ID: ${requestedId} no existe!`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "51d0c4c4-9bcf-4d8e-ae79-3d98e4c41447",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "http://localhost:8080/helpdesk/people/employees/{{entityIdToDelete}}"
					},
					"response": []
				},
				{
					"name": "DeleteEmployeeResponse400DeletionNotAllowed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0d226282-b726-4474-935a-4bb0af64cbe6",
								"exec": [
									"// Pre-request Script for DELETE /people/employees/{{employeeIdToDelete}}",
									"//set the employeeIdToDelete to 0 to delete the employee with id 0 which doesnt exists",
									"pm.environment.set(\"entityIdToDelete\", 1);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bf12c01a-ac14-461b-a12d-3cd24bc891e1",
								"exec": [
									"// Post-response Tests for 'DELETE Employee by ID - 404 Not Found'",
									"",
									"// Test 1: Verify Status Code is 404",
									"pm.test(\"Status code is 400 Deletion not allowed\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test 2: Verify Response is JSON",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Test 3: Verify Response body matches ErrorResponseDTO structure",
									"pm.test(\"Response body matches ErrorResponseDTO structure\", function () {",
									"    const responseJson = pm.response.json();",
									"    const requestedId = pm.environment.get(\"entityIdToDelete\");",
									"",
									"    pm.expect(responseJson).to.be.an('object', 'Error response should be an object');",
									"    pm.expect(responseJson).to.have.property('message').and.to.be.a('string', 'Error message should be a string');",
									"",
									"    // Optional: Assert on specific error message content for 404",
									"    // Or if your API is very specific:",
									"     pm.expect(responseJson.message).to.eql(\"Eliminacion de empleado no esta permitida! dicha accion corromperia los datos de la organizacion\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "36446df9-5b73-4036-b083-8972449c6fd5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "http://localhost:8080/helpdesk/people/employees/{{entityIdToDelete}}"
					},
					"response": []
				}
			],
			"id": "91241a62-1d1f-4cd8-bbda-a7081442e969"
		},
		{
			"name": "collaborator",
			"item": [
				{
					"name": "GetCollaboratorByIDResponse200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c73f314-542b-4f98-a079-c5ba24c211dd",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('firstName', 'lastName', 'birthDate', 'email', 'phone', 'address', 'zipCode', 'skills', 'profilePicture', 'collaboratorId');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.email).to.exist.and.to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);",
									"});",
									"",
									"",
									"pm.test(\"Skills is an array that can be either empty or contain non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('skills').that.is.an('array');",
									"    ",
									"    responseData.skills.forEach(skill => {",
									"        pm.expect(skill).to.be.oneOf([null, '']).or.to.be.a('string').that.is.not.empty;",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "62f1a310-40b0-40cc-9af5-e88991d6a1fb",
								"exec": [
									"pm.environment.set(\"entityId\", 1);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "adb88d9b-d350-41a6-889d-eb86cbae011f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/people/collaborators/{{entityId}}"
					},
					"response": []
				},
				{
					"name": "GetCollaboratorByIdResponse404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f9b55649-02bb-4076-932a-714102994a44",
								"exec": [
									"pm.environment.set(\"entityId\", 1000);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6e229834-7795-4e21-a67d-7c003b4472ce",
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"});",
									"",
									"",
									"pm.test(\"Response should contain a message field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    const requestedId = pm.environment.get(\"collaboratorId\");",
									"    ",
									"    pm.expect(responseData).to.be.an('object', 'Error response should be an object');",
									"    pm.expect(responseData).to.have.property('message').and.to.be.a('string', 'Error message should be a string');",
									"    pm.expect(responseData.message).to.eql(`Colaborador con ID: ${requestedId} no existe!`);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7def3ed8-64c1-4d99-9acf-4eb731fb0580",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/people/collaborators/{{entityId}}"
					},
					"response": []
				},
				{
					"name": "GetAllCollaboratorsResponse200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39ca2117-30ff-4f1e-ba0a-d432e769f242",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one collaborator object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(function(collaborator) {",
									"        pm.expect(collaborator).to.be.an('object');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Validate the schema of the collaborator object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach(function(collaborator) {",
									"        pm.expect(collaborator).to.be.an('object');",
									"        pm.expect(collaborator).to.have.all.keys('firstName', 'lastName', 'birthDate', 'email', 'phone', 'address', 'zipCode', 'skills', 'profilePicture', 'collaboratorId');",
									"",
									"        pm.expect(collaborator.firstName).to.be.a('string');",
									"        pm.expect(collaborator.lastName).to.be.a('string');",
									"        pm.expect(collaborator.birthDate).to.be.a('string');",
									"        pm.expect(collaborator.email).to.be.a('string').that.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"        pm.expect(collaborator.phone).to.be.a('string');",
									"        pm.expect(collaborator.address).to.be.a('string');",
									"        pm.expect(collaborator.zipCode).to.be.a('string');",
									"        pm.expect(collaborator.skills).to.be.an('array');",
									"        pm.expect(collaborator.profilePicture).to.satisfy(function(value) {",
									"            return value === null || typeof value === 'string';",
									"        });",
									"        pm.expect(collaborator.collaboratorId).to.be.a('number');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(function(collaborator) {",
									"        pm.expect(collaborator.email).to.exist;",
									"        pm.expect(collaborator.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7cd4050b-642e-45b3-948c-beea6cf340d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/people/collaborators"
					},
					"response": []
				},
				{
					"name": "CreateCollaboratorResponse201",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8bee0a6-0408-45a1-9cd9-3aee4d368f1f",
								"exec": [
									"let entityDiffEmailCurrentNumber = parseInt(pm.environment.get(\"entityDiffEmail\")); // Convert to integer",
									"if (isNaN(entityDiffEmailCurrentNumber)) {",
									"    console.warn(\"entityDiffEmail was not a number.\");",
									"}",
									"pm.environment.set(\"entityDiffEmail\", entityDiffEmailCurrentNumber + 1);",
									"",
									"let entityDiffPhonenumberCurrentNumber = parseInt(pm.environment.get(\"entityDiffPhonenumber\")); // Convert to integer",
									"if (isNaN(entityDiffPhonenumberCurrentNumber)) {",
									"    console.warn(\"entityDiffPhonenumber was not a number.\");",
									"}",
									"pm.environment.set(\"entityDiffPhonenumber\", entityDiffPhonenumberCurrentNumber + 1);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7629d102-ff92-4ef8-9979-f98bf5c1e9f7",
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('collaboratorId');",
									"});",
									"",
									"",
									"pm.test(\"collaboratorId is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.collaboratorId).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1c1a6b3e-71d0-416b-b2e3-550d6cc04256",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Alex\",\n  \"lastName\": \"Rivera\",\n  \"birthDate\": \"1995-03-20\",\n  \"email\": \"alex.rivera{{entityDiffEmail}}@makani.com\",\n  \"phone\": \"555-123-{{entityDiffPhonenumber}}\",\n  \"address\": \"789 Art Lane\",\n  \"zipCode\": \"98765\",\n  \"skills\": [\"Digital Painting, Character Design\"],\n  \"profilePicture\": \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=\",\n  \"employeeAuth\": {\n    \"employeeType\": \"Collaborator\",\n    \"usernameToken\": \"alex.rivera\",\n    \"passwordToken\": \"securePass!23\",\n    \"role\": \"COLLABORATOR\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/helpdesk/people/collaborators"
					},
					"response": []
				},
				{
					"name": "CreateCollaboratorResponse400DuplicateEmail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "934ba32b-f6e7-454b-849f-683184c7f992",
								"exec": [
									"let entityDiffPhonenumberCurrentNumber = parseInt(pm.environment.get(\"entityDiffPhonenumber\")); // Convert to integer",
									"if (isNaN(entityDiffPhonenumberCurrentNumber)) {",
									"    console.warn(\"entityDiffPhonenumber was not a number.\");",
									"}",
									"pm.environment.set(\"entityDiffPhonenumber\", entityDiffPhonenumberCurrentNumber + 1);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fb93acdf-c96a-4b0a-a851-b03cd6e40355",
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has a message field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData.message).to.eql(\"Error, valor enviado en campo correo electronico ya esta registrado\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3c3737b8-d5ea-4273-bc76-8daa5cd66341",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Karen\",\n  \"lastName\": \"White\",\n  \"birthDate\": \"1980-03-25\",\n  \"email\": \"karen.w@example.com\",\n  \"phone\": \"333-444-{{entityDiffPhonenumber}}\",\n  \"address\": \"333 Pinecrest Ln\",\n  \"zipCode\": \"33333\",\n  \"skills\": [\"Painting, Drawing\"],\n  \"profilePicture\": \"\", \n  \"employeeAuth\": {\n    \"employeeType\": \"Collaborator\", \n    \"usernameToken\": \"karen.white\", \n    \"passwordToken\": \"securePass\", \n    \"role\": \"COLLABORATOR\" \n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/people/collaborators"
					},
					"response": []
				},
				{
					"name": "CreateCollaboratorResponse400DuplicatePhoneNumber",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a4e09941-237e-41f3-b1e3-896aeac6bb94",
								"exec": [
									"let currentNumber = parseInt(pm.environment.get(\"entityDiffEmail\")); // Convert to integer",
									"if (isNaN(currentNumber)) {",
									"    console.warn(\"entityDiffEmail was not a number\");",
									"}",
									"pm.environment.set(\"entityDiffEmail\", currentNumber + 1);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "432dd026-0e96-4931-be47-eeda090565af",
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Response has a message field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData.message).to.eql(\"Error, valor enviado en campo numero de celular ya esta registrado\");",
									"});",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1a67b9b0-1709-40f2-babd-518d6662fb4c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Karen\",\n  \"lastName\": \"White\",\n  \"birthDate\": \"1980-03-25\",\n  \"email\": \"karen.w{{entityDiffEmail}}@example.com\",\n  \"phone\": \"333-444-5555\",\n  \"address\": \"333 Pinecrest Ln\",\n  \"zipCode\": \"33333\",\n  \"skills\": [\"Painting, Drawing\"],\n  \"profilePicture\": \"\", \n  \"employeeAuth\": {\n    \"employeeType\": \"Collaborator\", \n    \"usernameToken\": \"karen.white\", \n    \"passwordToken\": \"securePass\", \n    \"role\": \"COLLABORATOR\" \n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/people/collaborators"
					},
					"response": []
				},
				{
					"name": "DeleteCollaboratorResponse204",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "70986511-3634-44a3-86f7-d2634f316afd",
								"exec": [
									"// Pre-request Script for DELETE /people/collaborators/{{collaboratorIdToDelete}}",
									"",
									"// --- Configuration ---",
									"// Adjust the path to your collaborator creation endpoint",
									"const CREATE_COLLABORATOR_URL = pm.environment.get(\"baseUrl\") + \"/people/collaborators\";",
									"// Assume the Authorization header is set at collection/folder level, or set it here too if needed",
									"const AUTH_TOKEN = pm.environment.get(\"authToken\");",
									"",
									"// --- Generate Unique Collaborator Data ---",
									"// Use a timestamp to ensure uniqueness for email and phone",
									"const timestamp = Date.now();",
									"const uniqueEmail = `collab_delete_test_${timestamp}@example.com`;",
									"const uniquePhone = `888-777-${timestamp.toString().slice(-4)}`; // Last 4 digits of timestamp",
									"",
									"// This is the payload for creating a *Collaborator*",
									"const collaboratorData = {",
									"  \"firstName\": \"Temp\",",
									"  \"lastName\": \"Collab\",",
									"  \"birthDate\": \"1990-01-01\",",
									"  \"email\": uniqueEmail,",
									"  \"phone\": uniquePhone,",
									"  \"address\": \"456 Test Drive\",",
									"  \"zipCode\": \"12345\",",
									"  \"skills\": \"Temporary Delete Collaborator Skills\",",
									"  \"profilePicture\": \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=\", // Minimal Base64",
									"  \"employeeAuth\": { // Nested InternalAuthDTO for collaborator's authentication",
									"    \"employeeType\": \"Collaborator\", // Must match the collaborator type",
									"    \"usernameToken\": `temp_collab_${timestamp}`,",
									"    \"passwordToken\": \"CollabPass123\",",
									"    \"role\": \"COLLABORATOR\" // Role for this temporary collaborator",
									"  }",
									"};",
									"",
									"// --- Make the POST request to create the collaborator ---",
									"pm.sendRequest({",
									"    url: CREATE_COLLABORATOR_URL,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': `Bearer ${AUTH_TOKEN}` // Use the existing auth token",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(collaboratorData)",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.error(\"Pre-request: Error creating collaborator for deletion: \", err);",
									"        // Fail the main DELETE request if setup fails",
									"        pm.test(\"Pre-request: Collaborator creation failed (network/request error)\", false);",
									"    } else {",
									"        // Ensure creation was successful (HTTP 201)",
									"        console.log(\"Pre-request: Collaborator creation response status code:\", res.code);",
									"        console.log(\"Pre-request: Collaborator creation response body:\", res.json()); // Log the body",
									"",
									"        if (res.code === 201) { // Check for successful creation (201 Created)",
									"            const createdCollaboratorJson = res.json();",
									"",
									"            // Check if collaboratorId was returned (assuming it's named 'collaboratorId' in response)",
									"            if (createdCollaboratorJson && typeof createdCollaboratorJson.collaboratorId === 'number') {",
									"                const entityIdToDelete = createdCollaboratorJson.collaboratorId;",
									"                pm.environment.set(\"entityIdToDelete\", entityIdToDelete); // Store the ID for the main DELETE request",
									"                console.log(`Pre-request: Created collaborator with ID ${entityIdToDelete} for deletion.`);",
									"                pm.test(\"Pre-request: Collaborator creation successful (201)\", true); // Mark success",
									"            } else {",
									"                console.error(\"Pre-request: Collaborator creation succeeded (201) but missing collaboratorId in response.\");",
									"                pm.test(\"Pre-request: Collaborator creation failed (missing ID)\", false);",
									"            }",
									"        } else {",
									"            console.error(`Pre-request: Collaborator creation failed with status ${res.code}. Response:`, res.json());",
									"            pm.test(\"Pre-request: Collaborator creation failed for delete test\", false); // Mark failure",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a759fd66-d9b7-4380-89a2-449f0d1ef53e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/people/collaborators/{{entityIdToDelete}}"
					},
					"response": []
				},
				{
					"name": "DeleteCollaboratorResponse404",
					"id": "f85786dd-f9e1-4470-ad51-450eaf9163c1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			],
			"id": "b531e507-710d-4826-be96-8add6c94dbff"
		},
		{
			"name": "security",
			"item": [
				{
					"name": "login internal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8dd18529-b65e-407b-ade9-1de35373c8b8",
								"exec": [
									"// Ensure the request was successful (HTTP Status 200 OK)",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response body is JSON",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Parse the JSON response",
									"const responseData = pm.response.json();",
									"",
									"// Check if the 'token' property exists in the response",
									"pm.test(\"Response has 'token' property\", function () {",
									"    pm.expect(responseData).to.have.property('token');",
									"});",
									"",
									"// Store the token in an environment variable",
									"if (responseData && responseData.token) {",
									"    // Set the environment variable 'authToken'",
									"    pm.environment.set(\"authToken\", responseData.token);",
									"    console.log(\"Authentication Token stored: \" + responseData.token.substring(0, 20) + \"...\"); // Log a snippet",
									"} else {",
									"    console.error(\"Could not find 'token' in the response.\");",
									"    pm.test(\"Token was not found in response\", false); // Fail the test if token is missing",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9c5f958e-6806-4143-b1d5-af8820618fba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"pass1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/helpdesk/security/login/internal"
					},
					"response": []
				},
				{
					"name": "check endpoints",
					"id": "6d2df5fb-dd28-4044-bbe2-58f107bcd40a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:8080/helpdesk/actuator/mappings"
					},
					"response": []
				}
			],
			"id": "ad54926e-dd3d-4628-8504-483cd34c60d2"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{authToken}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "74f5ad61-8ea9-4abc-ab28-72283887a69c",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ad17a33a-66e6-4cd1-a5db-a3798580dcc9",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}