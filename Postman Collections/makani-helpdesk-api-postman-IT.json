{
	"info": {
		"_postman_id": "a2bf1c5f-7f32-4a72-a698-f13830735c13",
		"name": "makani-helpdesk-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "API Calls",
			"item": [
				{
					"name": "People",
					"item": [
						{
							"name": "AdultStudent",
							"item": [
								{
									"name": "CreateAdultStudentResponse201",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "964cae58-b5e4-471e-ba04-6b1f5a19a23a",
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.expect(pm.response.code).to.eql(201);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('adultStudentId').that.is.a('number');",
													"});",
													"",
													"pm.test(\"adultStudentId is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.adultStudentId).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
													"});",
													"",
													"pm.test(\"Response content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
													"});",
													"var responseData = pm.response.json();",
													"",
													"// Test the response status code",
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.expect(pm.response.code).to.eql(201);",
													"});",
													"",
													"// Test the response time",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"// Test the response structure and required fields",
													"pm.test(\"Response is an object with required fields\", function () {",
													"    pm.expect(responseData).to.be.an('object').that.has.property('adultStudentId').that.is.a('number');",
													"});",
													"",
													"// Test that adultStudentId is a non-negative integer",
													"pm.test(\"adultStudentId is a non-negative integer\", function () {",
													"    pm.expect(responseData.adultStudentId).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
													"});",
													"",
													"// Test response content type",
													"pm.test(\"Response content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "90d78734-ec0f-49cf-aed9-494830c35e7e",
												"exec": [
													"let entityDiffEmailCurrentNumber = parseInt(pm.environment.get(\"entityDiffEmail\")); // Convert to integer",
													"if (isNaN(entityDiffEmailCurrentNumber)) {",
													"    console.warn(\"entityDiffEmail was not a number.\");",
													"}",
													"pm.environment.set(\"entityDiffEmail\", entityDiffEmailCurrentNumber + 1);",
													"",
													"let entityDiffPhonenumberCurrentNumber = parseInt(pm.environment.get(\"entityDiffPhonenumber\")); // Convert to integer",
													"if (isNaN(entityDiffPhonenumberCurrentNumber)) {",
													"    console.warn(\"entityDiffPhonenumber was not a number.\");",
													"}",
													"pm.environment.set(\"entityDiffPhonenumber\", entityDiffPhonenumberCurrentNumber + 1);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "67ce3b27-a35d-4a2a-92e2-f9109a5409db",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Maria\",\n  \"lastName\": \"Gonzales\",\n  \"birthDate\": \"1998-07-20\",\n  \"email\": \"maria.gonzales{{entityDiffEmail}}@example.com\",\n  \"phone\": \"555-123-{{entityDiffPhonenumber}}\",\n  \"address\": \"123 Oak Avenue\",\n  \"zipCode\": \"90210\",\n  \"profilePicture\": \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=\",\n  \"auth\": {\n    \"provider\": \"Google\",\n    \"token\": \"MjU2Yml0U2VjcmV0S2V5SGFzaExpdGxhckFiY2RlZmdo\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/people/adultStudents"
									},
									"response": []
								},
								{
									"name": "CreateAdultStudentResponse400DuplicateEmail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "964cae58-b5e4-471e-ba04-6b1f5a19a23a",
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"",
													"pm.test(\"Response contains a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object').that.has.property('message');",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response message is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.above(0, \"Message should not be empty\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "90d78734-ec0f-49cf-aed9-494830c35e7e",
												"exec": [
													"let entityDiffPhonenumberCurrentNumber = parseInt(pm.environment.get(\"entityDiffPhonenumber\")); // Convert to integer",
													"if (isNaN(entityDiffPhonenumberCurrentNumber)) {",
													"    console.warn(\"entityDiffPhonenumber was not a number.\");",
													"}",
													"pm.environment.set(\"entityDiffPhonenumber\", entityDiffPhonenumberCurrentNumber + 1);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "97bfb5d1-2905-47b9-b635-b279ceb24d5d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"adultStudentId\": 1,\n  \"firstName\": \"Ava\",\n  \"lastName\": \"Rodriguez\",\n  \"birthDate\": \"1998-07-15\",\n  \"email\": \"ava.r@example.com\",\n  \"phone\": \"111-111-{{entityDiffPhonenumber}}}\",\n  \"address\": \"111 Pine St\",\n  \"zipCode\": \"11111\",\n  \"profilePicture\": \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAACmJLR0QAgvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH5gIHDyYn7N2JngAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVP/fhwAAAL5SURBHRfH2s=\",\n  \"auth\": {\n    \"customerAuthId\": 1,\n    \"provider\": \"Google\",\n    \"token\": \"aHR0cHNfZ29vZ2xlX2F1dGhfNWVjcmV0dG9rZW4=\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/people/adultStudents"
									},
									"response": []
								},
								{
									"name": "CreateAdultStudentResponse400DuplicatePhoneNumber",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "964cae58-b5e4-471e-ba04-6b1f5a19a23a",
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"",
													"pm.test(\"Response should contain a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object').that.includes.keys('message');",
													"});",
													"",
													"",
													"pm.test(\"Message must be a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "90d78734-ec0f-49cf-aed9-494830c35e7e",
												"exec": [
													"let currentNumber = parseInt(pm.environment.get(\"entityDiffEmail\")); // Convert to integer",
													"if (isNaN(currentNumber)) {",
													"    console.warn(\"entityDiffEmail was not a number\");",
													"}",
													"pm.environment.set(\"entityDiffEmail\", currentNumber + 1);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "78fef1d5-ed38-4a5a-b255-320bb9bf48b8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"adultStudentId\": 1,\n  \"firstName\": \"Ava\",\n  \"lastName\": \"Rodriguez\",\n  \"birthDate\": \"1998-07-15\",\n  \"email\": \"ava.r{{entityDiffEmail}}@example.com\",\n  \"phone\": \"111-111-1111\",\n  \"address\": \"111 Pine St\",\n  \"zipCode\": \"11111\",\n  \"profilePicture\": \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAACmJLR0QAgvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH5gIHDyYn7N2JngAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVP/fhwAAAL5SURBHRfH2s=\",\n  \"auth\": {\n    \"customerAuthId\": 1,\n    \"provider\": \"Google\",\n    \"token\": \"aHR0cHNfZ29vZ2xlX2F1dGhfNWVjcmV0dG9rZW4=\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/people/adultStudents"
									},
									"response": []
								},
								{
									"name": "DeleteAdultStudentResponse204",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e81292aa-728b-407d-9bee-b6889c4a64e3",
												"exec": [
													"// Pre-request Script for DELETE /people/adultStudents/{{adultStudentIdToDelete}}",
													"",
													"// --- Configuration ---",
													"// Adjust the path to your adult student creation endpoint",
													"const CREATE_ADULT_STUDENT_URL = pm.environment.get(\"baseUrl\") + \"/people/adultStudents\";",
													"// Assume the Authorization header is set at collection/folder level, or set it here too if needed",
													"const AUTH_TOKEN = pm.environment.get(\"authToken\");",
													"",
													"// --- Generate Unique Adult Student Data ---",
													"// Use a timestamp to ensure uniqueness for email and phone",
													"const timestamp = Date.now();",
													"const uniqueEmail = `adult_student_delete_test_${timestamp.toString().slice(-4)}@example.com`;",
													"const uniquePhone = `777-666-${timestamp.toString().slice(-4)}`; // Last 4 digits of timestamp",
													"",
													"// This is the payload for creating an *Adult Student*",
													"const adultStudentData = {",
													"  \"firstName\": \"Test\",",
													"  \"lastName\": \"Student\",",
													"  \"birthDate\": \"1998-07-20\", // From provided JSON",
													"  \"email\": uniqueEmail,      // Dynamically generated",
													"  \"phone\": uniquePhone,      // Dynamically generated",
													"  \"address\": \"123 Test Student St\",",
													"  \"zipCode\": \"54321\",",
													"  \"profilePicture\": \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAACmJLR0QAgvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH5gIHDyYn7N2JngAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVP/fhwAAAL5SURBHRfH2s=\", // From provided JSON",
													"  \"auth\": { // Nested CustomerAuthDTO for adult student's authentication",
													"    \"provider\": \"Google\", // From provided JSON",
													"    \"token\": \"MjU2Yml0U2VjcmV0S2V5SGFzaExpdGxhckFiY2RlZmdo\"// Mock Base64 hash from provided JSON",
													"  }",
													"};",
													"",
													"// --- Make the POST request to create the adult student ---",
													"pm.sendRequest({",
													"    url: CREATE_ADULT_STUDENT_URL,",
													"    method: 'POST',",
													"    header: {",
													"        'Content-Type': 'application/json',",
													"        'Authorization': `Bearer ${AUTH_TOKEN}` // Use the existing auth token",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify(adultStudentData)",
													"    }",
													"}, function (err, res) {",
													"    if (err) {",
													"        console.error(\"Pre-request: Network/Request Error during adult student creation: \", err);",
													"        // Fail the main DELETE request if setup fails",
													"    } else {",
													"        // Ensure creation was successful (HTTP 201)",
													"        console.log(\"Pre-request: Adult student creation response status code:\", res.code);",
													"        console.log(\"Pre-request: Adult student creation response body:\", res.json()); // Log the body",
													"",
													"        if (res.code === 201) { // Check for successful creation (201 Created)",
													"            const createdAdultStudentJson = res.json();",
													"",
													"            // Check if adultStudentId was returned (assuming it's named 'adultStudentId' in response)",
													"            if (createdAdultStudentJson && typeof createdAdultStudentJson.adultStudentId === 'number') {",
													"                const entityIdToDelete = createdAdultStudentJson.adultStudentId;",
													"                pm.environment.set(\"entityIdToDelete\", entityIdToDelete); // Store the ID for the main DELETE request",
													"                console.log(`Pre-request: Created adult student with ID ${entityIdToDelete} for deletion.`);",
													"            } else {",
													"                console.error(\"Pre-request: Adult student creation succeeded (201) but missing adultStudentId in response.\");",
													"            }",
													"        } else {",
													"            console.error(`Pre-request: Adult student creation failed with status ${res.code}. Response:`, res.json());",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f62b18a5-f923-4c96-b0a0-e3e799c1984c",
												"exec": [
													"pm.test(\"Response status code is 204\", function () {",
													"    pm.expect(pm.response.code).to.eql(204);",
													"});",
													"",
													"",
													"pm.test(\"Response has no content for successful DELETE request\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"    pm.expect(pm.response.text()).to.be.empty;",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test(\"Response body should be empty for DELETE request\", function () {",
													"    pm.expect(pm.response.text()).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b208b9a3-e670-42cf-a981-22ad7b4ce93e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseUrl}}/people/adultStudents/{{entityIdToDelete}}"
									},
									"response": []
								},
								{
									"name": "DeleteAdultStudentResponse404",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e81292aa-728b-407d-9bee-b6889c4a64e3",
												"exec": [
													"pm.environment.set(\"entityIdToDelete\", 0);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f62b18a5-f923-4c96-b0a0-e3e799c1984c",
												"exec": [
													"pm.test(\"Response status code is 404\", function () {",
													"    pm.expect(pm.response.code).to.eql(404);",
													"});",
													"",
													"",
													"pm.test(\"Response has a Content-Type of application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response contains a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    entityIdToDelete = pm.environment.get(\"entityIdToDelete\");",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message');",
													"    pm.expect(responseData.message).to.eql(`Alumno con ID: ${entityIdToDelete} no existe!`);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"The message field must be a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "dec6e1c3-5512-4e33-b46c-073dd4d5404e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseUrl}}/people/adultStudents/{{entityIdToDelete}}"
									},
									"response": []
								},
								{
									"name": "DeleteAdultStudentResponse400DeletionNotAllowed",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e81292aa-728b-407d-9bee-b6889c4a64e3",
												"exec": [
													"pm.environment.set(\"entityIdToDelete\", 1);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f62b18a5-f923-4c96-b0a0-e3e799c1984c",
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"",
													"pm.test(\"Response contains a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message');",
													"    pm.expect(responseData.message).to.eql(\"Eliminacion de Alumno no esta permitida! dicha accion corromperia los datos de la organizacion\");",
													"});",
													"",
													"",
													"pm.test(\"The message field must be a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.have.property('message').that.is.a('string').and.has.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "395fcdae-8913-4869-8023-fb814fcada3a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseUrl}}/people/adultStudents/{{entityIdToDelete}}"
									},
									"response": []
								},
								{
									"name": "GetAdultStudentByIdResponse200",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a8f40f8c-e64c-474f-b708-0a2029cbd22b",
												"exec": [
													"pm.environment.set(\"entityId\", 1);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "11ba44e8-8b5b-4724-ae1f-7fe7fbbeeb46",
												"exec": [
													"// Post-response Tests for 'GET AdultStudent by ID - 200 OK'",
													"",
													"// Test 1: Verify Status Code is 200",
													"pm.test(\"Status code is 200 OK\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Test 2: Verify Response is JSON",
													"pm.test(\"Response is JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"// Test 3: Verify Response body matches GetAdultStudentResponseDTO structure and content",
													"pm.test(\"Response body matches GetAdultStudentResponseDTO structure\", function () {",
													"    const responseJson = pm.response.json();",
													"    const requestedId = pm.environment.get(\"entityId\"); // Get the ID used in the request",
													"",
													"    // Basic structure and type checks for required fields",
													"    pm.expect(responseJson).to.be.an('object', 'Response should be an object');",
													"    pm.expect(responseJson).to.have.property('adultStudentId').and.to.be.a('number', 'adultStudentId should be a number');",
													"    pm.expect(responseJson.adultStudentId).to.eql(parseInt(requestedId), ",
													"                                    'Returned adultStudentId should match the requested ID');",
													"    pm.expect(responseJson).to.have.property('firstName').and.to.be.a('string', 'firstName should be a string');",
													"    pm.expect(responseJson).to.have.property('lastName').and.to.be.a('string', 'lastName should be a string');",
													"    pm.expect(responseJson).to.have.property('email').and.to.be.a('string', 'email should be a string');",
													"    pm.expect(responseJson).to.have.property('phone').and.to.be.a('string', 'phone should be a string');",
													"    pm.expect(responseJson).to.have.property('address').and.to.be.a('string', 'address should be a string');",
													"    pm.expect(responseJson).to.have.property('zipCode').and.to.be.a('string', 'zipCode should be a string');",
													"    pm.expect(responseJson).to.have.property('birthDate').and.to.be.a('string', 'birthDate should be a string (YYYY-MM-DD)');",
													"});",
													"",
													"pm.test(\"Response body is not a collection\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).not.to.be.an('array');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ef37116f-fce2-4726-9a94-8b19a4b86ff8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/people/adultStudents/{{entityId}}"
									},
									"response": []
								},
								{
									"name": "GetAdultStudentByIdResponse404",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a8f40f8c-e64c-474f-b708-0a2029cbd22b",
												"exec": [
													"pm.environment.set(\"entityId\", 1000);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "11ba44e8-8b5b-4724-ae1f-7fe7fbbeeb46",
												"exec": [
													"// Post-response Tests for 'GET Employee by ID - 404 Not Found'",
													"",
													"// Test 1: Verify Status Code is 404",
													"pm.test(\"Status code is 404 Not Found\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"// Test 2: Verify Response is JSON",
													"pm.test(\"Response is JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"// Test 3: Verify Response body matches ErrorResponseDTO structure",
													"pm.test(\"Response body matches ErrorResponseDTO structure\", function () {",
													"    const responseJson = pm.response.json();",
													"    const requestedId = pm.environment.get(\"entityId\"); // Get the ID used in the request",
													"",
													"    pm.expect(responseJson).to.be.an('object', 'Error response should be an object');",
													"    pm.expect(responseJson).to.have.property('message').and.to.be.a('string', 'Error message should be a string');",
													"    pm.expect(responseJson.message).to.eql(`Alumno con ID: ${requestedId} no existe!`);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f8c00fab-5256-492e-84bd-d2f0e50fd5b2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/people/adultStudents/{{entityId}}"
									},
									"response": []
								},
								{
									"name": "GetAllAdultStudentsResponse200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4f8c38c-a787-428e-92a2-dd533409b64c",
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Validate the schema of the adult students object\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
													"",
													"    responseData.forEach(function(student) {",
													"        pm.expect(student).to.be.an('object');",
													"        pm.expect(student).to.have.all.keys('firstName', 'lastName', 'birthDate', 'email', 'phone', 'address', 'zipCode', 'profilePicture', 'adultStudentId');",
													"        ",
													"        pm.expect(student.firstName).to.be.a('string');",
													"        pm.expect(student.lastName).to.be.a('string');",
													"        pm.expect(student.birthDate).to.be.a('string');",
													"        pm.expect(student.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
													"        pm.expect(student.phone).to.be.a('string');",
													"        pm.expect(student.address).to.be.a('string');",
													"        pm.expect(student.zipCode).to.be.a('string');",
													"        pm.expect(student.profilePicture).to.satisfy(function(picture) {",
													"            return picture === null || typeof picture === 'string';",
													"        });",
													"        pm.expect(student.adultStudentId).to.be.a('number');",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Email is in a valid format\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
													"    responseData.forEach(function(student) {",
													"        pm.expect(student.email).to.exist;",
													"        pm.expect(student.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3c8a65e5-2cd4-4456-b70a-174246abd1cc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/people/adultStudents"
									},
									"response": []
								}
							],
							"id": "1607bf37-a494-4e1f-820a-7cdc0fc7e0e6"
						},
						{
							"name": "collaborator",
							"item": [
								{
									"name": "GetCollaboratorByIDResponse200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c73f314-542b-4f98-a079-c5ba24c211dd",
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.all.keys('firstName', 'lastName', 'birthDate', 'email', 'phone', 'address', 'zipCode', 'skills', 'profilePicture', 'collaboratorId');",
													"});",
													"",
													"",
													"pm.test(\"Email is in a valid format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.email).to.exist.and.to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);",
													"});",
													"",
													"",
													"pm.test(\"Skills is an array that can be either empty or contain non-empty strings\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.have.property('skills').that.is.an('array');",
													"    ",
													"    responseData.skills.forEach(skill => {",
													"        pm.expect(skill).to.be.oneOf([null, '']).or.to.be.a('string').that.is.not.empty;",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "62f1a310-40b0-40cc-9af5-e88991d6a1fb",
												"exec": [
													"pm.environment.set(\"entityId\", 1);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "adb88d9b-d350-41a6-889d-eb86cbae011f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/people/collaborators/{{entityId}}"
									},
									"response": []
								},
								{
									"name": "GetCollaboratorByIdResponse404",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f9b55649-02bb-4076-932a-714102994a44",
												"exec": [
													"pm.environment.set(\"entityId\", 1000);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6e229834-7795-4e21-a67d-7c003b4472ce",
												"exec": [
													"pm.test(\"Response status code is 404\", function () {",
													"    pm.expect(pm.response.code).to.eql(404);",
													"});",
													"",
													"",
													"pm.test(\"Response should contain a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message');",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    const requestedId = pm.environment.get(\"entityId\");",
													"    ",
													"    pm.expect(responseData).to.be.an('object', 'Error response should be an object');",
													"    pm.expect(responseData).to.have.property('message').and.to.be.a('string', 'Error message should be a string');",
													"    pm.expect(responseData.message).to.eql(`Colaborador con ID: ${requestedId} no existe!`);",
													"});",
													"",
													"",
													"pm.test(\"Response content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7def3ed8-64c1-4d99-9acf-4eb731fb0580",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/people/collaborators/{{entityId}}"
									},
									"response": []
								},
								{
									"name": "GetAllCollaboratorsResponse200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39ca2117-30ff-4f1e-ba0a-d432e769f242",
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response is an array with at least one collaborator object\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
													"    responseData.forEach(function(collaborator) {",
													"        pm.expect(collaborator).to.be.an('object');",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Validate the schema of the collaborator object\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
													"",
													"    responseData.forEach(function(collaborator) {",
													"        pm.expect(collaborator).to.be.an('object');",
													"        pm.expect(collaborator).to.have.all.keys('firstName', 'lastName', 'birthDate', 'email', 'phone', 'address', 'zipCode', 'skills', 'profilePicture', 'collaboratorId');",
													"",
													"        pm.expect(collaborator.firstName).to.be.a('string');",
													"        pm.expect(collaborator.lastName).to.be.a('string');",
													"        pm.expect(collaborator.birthDate).to.be.a('string');",
													"        pm.expect(collaborator.email).to.be.a('string').that.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
													"        pm.expect(collaborator.phone).to.be.a('string');",
													"        pm.expect(collaborator.address).to.be.a('string');",
													"        pm.expect(collaborator.zipCode).to.be.a('string');",
													"        pm.expect(collaborator.skills).to.be.an('array');",
													"        pm.expect(collaborator.profilePicture).to.satisfy(function(value) {",
													"            return value === null || typeof value === 'string';",
													"        });",
													"        pm.expect(collaborator.collaboratorId).to.be.a('number');",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Email is in a valid format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
													"    responseData.forEach(function(collaborator) {",
													"        pm.expect(collaborator.email).to.exist;",
													"        pm.expect(collaborator.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7cd4050b-642e-45b3-948c-beea6cf340d1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/people/collaborators"
									},
									"response": []
								},
								{
									"name": "CreateCollaboratorResponse201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8bee0a6-0408-45a1-9cd9-3aee4d368f1f",
												"exec": [
													"let entityDiffEmailCurrentNumber = parseInt(pm.environment.get(\"entityDiffEmail\")); // Convert to integer",
													"if (isNaN(entityDiffEmailCurrentNumber)) {",
													"    console.warn(\"entityDiffEmail was not a number.\");",
													"}",
													"pm.environment.set(\"entityDiffEmail\", entityDiffEmailCurrentNumber + 1);",
													"",
													"let entityDiffPhonenumberCurrentNumber = parseInt(pm.environment.get(\"entityDiffPhonenumber\")); // Convert to integer",
													"if (isNaN(entityDiffPhonenumberCurrentNumber)) {",
													"    console.warn(\"entityDiffPhonenumber was not a number.\");",
													"}",
													"pm.environment.set(\"entityDiffPhonenumber\", entityDiffPhonenumberCurrentNumber + 1);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7629d102-ff92-4ef8-9979-f98bf5c1e9f7",
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.expect(pm.response.code).to.eql(201);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response contains required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('collaboratorId');",
													"});",
													"",
													"",
													"pm.test(\"collaboratorId is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.collaboratorId).to.be.a('number').and.to.be.at.least(0);",
													"});",
													"",
													"",
													"pm.test(\"Response Content-Type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1c1a6b3e-71d0-416b-b2e3-550d6cc04256",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Alex\",\n  \"lastName\": \"Rivera\",\n  \"birthDate\": \"1995-03-20\",\n  \"email\": \"alex.rivera{{entityDiffEmail}}@makani.com\",\n  \"phone\": \"555-123-{{entityDiffPhonenumber}}\",\n  \"address\": \"789 Art Lane\",\n  \"zipCode\": \"98765\",\n  \"skills\": [\"Digital Painting, Character Design\"],\n  \"profilePicture\": \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=\",\n  \"employeeAuth\": {\n    \"employeeType\": \"Collaborator\",\n    \"usernameToken\": \"alex.rivera\",\n    \"passwordToken\": \"securePass!23\",\n    \"role\": \"COLLABORATOR\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/helpdesk/people/collaborators"
									},
									"response": []
								},
								{
									"name": "CreateCollaboratorResponse400DuplicateEmail",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "934ba32b-f6e7-454b-849f-683184c7f992",
												"exec": [
													"let entityDiffPhonenumberCurrentNumber = parseInt(pm.environment.get(\"entityDiffPhonenumber\")); // Convert to integer",
													"if (isNaN(entityDiffPhonenumberCurrentNumber)) {",
													"    console.warn(\"entityDiffPhonenumber was not a number.\");",
													"}",
													"pm.environment.set(\"entityDiffPhonenumber\", entityDiffPhonenumberCurrentNumber + 1);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fb93acdf-c96a-4b0a-a851-b03cd6e40355",
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message');",
													"    pm.expect(responseData.message).to.eql(\"Error, valor enviado en campo correo electronico ya esta registrado\");",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Response content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3c3737b8-d5ea-4273-bc76-8daa5cd66341",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Karen\",\n  \"lastName\": \"White\",\n  \"birthDate\": \"1980-03-25\",\n  \"email\": \"karen.w@example.com\",\n  \"phone\": \"333-444-{{entityDiffPhonenumber}}\",\n  \"address\": \"333 Pinecrest Ln\",\n  \"zipCode\": \"33333\",\n  \"skills\": [\"Painting, Drawing\"],\n  \"profilePicture\": \"\", \n  \"employeeAuth\": {\n    \"employeeType\": \"Collaborator\", \n    \"usernameToken\": \"karen.white\", \n    \"passwordToken\": \"securePass\", \n    \"role\": \"COLLABORATOR\" \n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/people/collaborators"
									},
									"response": []
								},
								{
									"name": "CreateCollaboratorResponse400DuplicatePhoneNumber",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a4e09941-237e-41f3-b1e3-896aeac6bb94",
												"exec": [
													"let currentNumber = parseInt(pm.environment.get(\"entityDiffEmail\")); // Convert to integer",
													"if (isNaN(currentNumber)) {",
													"    console.warn(\"entityDiffEmail was not a number\");",
													"}",
													"pm.environment.set(\"entityDiffEmail\", currentNumber + 1);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "432dd026-0e96-4931-be47-eeda090565af",
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test(\"Response has a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message');",
													"    pm.expect(responseData.message).to.eql(\"Error, valor enviado en campo numero de celular ya esta registrado\");",
													"});",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});",
													"",
													"pm.test(\"Response content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1a67b9b0-1709-40f2-babd-518d6662fb4c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Karen\",\n  \"lastName\": \"White\",\n  \"birthDate\": \"1980-03-25\",\n  \"email\": \"karen.w{{entityDiffEmail}}@example.com\",\n  \"phone\": \"333-444-5555\",\n  \"address\": \"333 Pinecrest Ln\",\n  \"zipCode\": \"33333\",\n  \"skills\": [\"Painting, Drawing\"],\n  \"profilePicture\": \"\", \n  \"employeeAuth\": {\n    \"employeeType\": \"Collaborator\", \n    \"usernameToken\": \"karen.white\", \n    \"passwordToken\": \"securePass\", \n    \"role\": \"COLLABORATOR\" \n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/people/collaborators"
									},
									"response": []
								},
								{
									"name": "DeleteCollaboratorResponse204",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "70986511-3634-44a3-86f7-d2634f316afd",
												"exec": [
													"// Pre-request Script for DELETE /people/collaborators/{{collaboratorIdToDelete}}",
													"",
													"// --- Configuration ---",
													"// Adjust the path to your collaborator creation endpoint",
													"const CREATE_COLLABORATOR_URL = pm.environment.get(\"baseUrl\") + \"/people/collaborators\";",
													"// Assume the Authorization header is set at collection/folder level, or set it here too if needed",
													"const AUTH_TOKEN = pm.environment.get(\"authToken\");",
													"",
													"// --- Generate Unique Collaborator Data ---",
													"// Use a timestamp to ensure uniqueness for email and phone",
													"const timestamp = Date.now();",
													"const uniqueEmail = `collab_delete_test_${timestamp}@example.com`;",
													"const uniquePhone = `888-777-${timestamp.toString().slice(-4)}`; // Last 4 digits of timestamp",
													"",
													"// This is the payload for creating a *Collaborator*",
													"const collaboratorData = {",
													"  \"firstName\": \"Temp\",",
													"  \"lastName\": \"Collab\",",
													"  \"birthDate\": \"1990-01-01\",",
													"  \"email\": uniqueEmail,",
													"  \"phone\": uniquePhone,",
													"  \"address\": \"456 Test Drive\",",
													"  \"zipCode\": \"12345\",",
													"  \"skills\": [\"Temporary Delete Collaborator Skills\"],",
													"  \"profilePicture\": \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=\", // Minimal Base64",
													"  \"employeeAuth\": { // Nested InternalAuthDTO for collaborator's authentication",
													"    \"employeeType\": \"Collaborator\", // Must match the collaborator type",
													"    \"usernameToken\": `temp_collab_${timestamp}`,",
													"    \"passwordToken\": \"CollabPass123\",",
													"    \"role\": \"COLLABORATOR\" // Role for this temporary collaborator",
													"  }",
													"};",
													"",
													"// --- Make the POST request to create the collaborator ---",
													"pm.sendRequest({",
													"    url: CREATE_COLLABORATOR_URL,",
													"    method: 'POST',",
													"    header: {",
													"        'Content-Type': 'application/json',",
													"        'Authorization': `Bearer ${AUTH_TOKEN}` // Use the existing auth token",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify(collaboratorData)",
													"    }",
													"}, function (err, res) {",
													"    if (err) {",
													"        console.error(\"Pre-request: Error creating collaborator for deletion: \", err);",
													"        // Fail the main DELETE request if setup fails",
													"        pm.test(\"Pre-request: Collaborator creation failed (network/request error)\", false);",
													"    } else {",
													"        // Ensure creation was successful (HTTP 201)",
													"        console.log(\"Pre-request: Collaborator creation response status code:\", res.code);",
													"        console.log(\"Pre-request: Collaborator creation response body:\", res.json()); // Log the body",
													"",
													"        if (res.code === 201) { // Check for successful creation (201 Created)",
													"            const createdCollaboratorJson = res.json();",
													"",
													"            // Check if collaboratorId was returned (assuming it's named 'collaboratorId' in response)",
													"            if (createdCollaboratorJson && typeof createdCollaboratorJson.collaboratorId === 'number') {",
													"                const entityIdToDelete = createdCollaboratorJson.collaboratorId;",
													"                pm.environment.set(\"entityIdToDelete\", entityIdToDelete); // Store the ID for the main DELETE request",
													"                console.log(`Pre-request: Created collaborator with ID ${entityIdToDelete} for deletion.`);",
													"                pm.test(\"Pre-request: Collaborator creation successful (201)\", true); // Mark success",
													"            } else {",
													"                console.error(\"Pre-request: Collaborator creation succeeded (201) but missing collaboratorId in response.\");",
													"                pm.test(\"Pre-request: Collaborator creation failed (missing ID)\", false);",
													"            }",
													"        } else {",
													"            console.error(`Pre-request: Collaborator creation failed with status ${res.code}. Response:`, res.json());",
													"            pm.test(\"Pre-request: Collaborator creation failed for delete test\", false); // Mark failure",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "43ddd0eb-3547-4d6d-a139-3bdcce5981ce",
												"exec": [
													"pm.test(\"Response status code is 204\", function () {",
													"    pm.expect(pm.response.code).to.eql(204);",
													"});",
													"",
													"",
													"pm.test(\"Response has no content for successful DELETE request\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"    pm.expect(pm.response.text()).to.be.empty;",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test(\"Response body should be empty for DELETE request\", function () {",
													"    pm.expect(pm.response.text()).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a759fd66-d9b7-4380-89a2-449f0d1ef53e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseUrl}}/people/collaborators/{{entityIdToDelete}}"
									},
									"response": []
								},
								{
									"name": "DeleteCollaboratorResponse404",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ae762376-c386-4ef2-8f90-52485b6e1bfb",
												"exec": [
													"pm.environment.set(\"entityIdToDelete\", 0);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eaafe1d1-02b6-4835-a5ee-4e2a02a6053d",
												"exec": [
													"pm.test(\"Response status code is 404\", function () {",
													"    pm.expect(pm.response.code).to.eql(404);",
													"});",
													"",
													"",
													"pm.test(\"Response has a Content-Type of application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response contains a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    entityIdToDelete = pm.environment.get(\"entityIdToDelete\");",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message');",
													"    pm.expect(responseData.message).to.eql(`Colaborador con ID: ${entityIdToDelete} no existe!`);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"The message field must be a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f85786dd-f9e1-4470-ad51-450eaf9163c1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseUrl}}/people/collaborators/{{entityIdToDelete}}"
									},
									"response": []
								},
								{
									"name": "DeleteCollaboratorResponse400DeletionNotAllowed",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4db0da0b-23a4-4963-9087-0000c4b430d8",
												"exec": [
													"pm.environment.set(\"entityIdToDelete\", 1);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "18ad6b0e-6d21-4835-9d25-fae62e810654",
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"",
													"pm.test(\"Response contains a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message');",
													"    pm.expect(responseData.message).to.eql(\"Eliminacion de Colaborador no esta permitida! dicha accion corromperia los datos de la organizacion\");",
													"});",
													"",
													"",
													"pm.test(\"The message field must be a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.have.property('message').that.is.a('string').and.has.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "79662e84-004b-4b52-aefb-a96ba8fff8fa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseUrl}}/people/collaborators/{{entityIdToDelete}}"
									},
									"response": []
								}
							],
							"id": "b531e507-710d-4826-be96-8add6c94dbff"
						},
						{
							"name": "employee",
							"item": [
								{
									"name": "GetEmployeeByIdResponse200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d7c077d-f8d4-4389-8862-eef747e5a867",
												"exec": [
													"// Post-response Tests for 'GET Employee by ID - 200 OK'",
													"",
													"// Test 1: Verify Status Code is 200",
													"pm.test(\"Status code is 200 OK\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Test 2: Verify Response is JSON",
													"pm.test(\"Response is JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"// Test 3: Verify Response body matches GetEmployeeResponseDTO structure and content",
													"pm.test(\"Response body matches GetEmployeeResponseDTO structure\", function () {",
													"    const responseJson = pm.response.json();",
													"    const requestedId = pm.environment.get(\"entityId\"); // Get the ID used in the request",
													"",
													"    // Basic structure and type checks for required fields",
													"    pm.expect(responseJson).to.be.an('object', 'Response should be an object');",
													"    pm.expect(responseJson).to.have.property('employeeId').and.to.be.a('number', 'employeeId should be a number');",
													"    pm.expect(responseJson.employeeId).to.eql(parseInt(requestedId), 'Returned employeeId should match the requested ID');",
													"    pm.expect(responseJson).to.have.property('firstName').and.to.be.a('string', 'firstName should be a string');",
													"    pm.expect(responseJson).to.have.property('lastName').and.to.be.a('string', 'lastName should be a string');",
													"    pm.expect(responseJson).to.have.property('email').and.to.be.a('string', 'email should be a string');",
													"    pm.expect(responseJson).to.have.property('phone').and.to.be.a('string', 'phone should be a string');",
													"    pm.expect(responseJson).to.have.property('address').and.to.be.a('string', 'address should be a string');",
													"    pm.expect(responseJson).to.have.property('zipCode').and.to.be.a('string', 'zipCode should be a string');",
													"    pm.expect(responseJson).to.have.property('birthDate').and.to.be.a('string', 'birthDate should be a string (YYYY-MM-DD)');",
													"});",
													"",
													"pm.test(\"Response body is not a collection\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).not.to.be.an('array');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c086f944-c5f7-4797-8e62-322396702805",
												"exec": [
													"pm.environment.set(\"entityId\", 1);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "fc93333c-09f0-4645-94b4-9808c8fe9d05",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/people/employees/{{entityId}}"
									},
									"response": []
								},
								{
									"name": "GetEmployeeByIdResponse404",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "26537b75-b4b8-41a5-904a-a29b6f799a21",
												"exec": [
													"pm.environment.set(\"entityId\", 1000);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a78ea244-19a4-4232-b2d6-14af8585b080",
												"exec": [
													"// Post-response Tests for 'GET Employee by ID - 404 Not Found'",
													"",
													"// Test 1: Verify Status Code is 404",
													"pm.test(\"Status code is 404 Not Found\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"// Test 2: Verify Response is JSON",
													"pm.test(\"Response is JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"// Test 3: Verify Response body matches ErrorResponseDTO structure",
													"pm.test(\"Response body matches ErrorResponseDTO structure\", function () {",
													"    const responseJson = pm.response.json();",
													"    const requestedId = pm.environment.get(\"entityId\"); // Get the ID used in the request",
													"",
													"    pm.expect(responseJson).to.be.an('object', 'Error response should be an object');",
													"    pm.expect(responseJson).to.have.property('message').and.to.be.a('string', 'Error message should be a string');",
													"    pm.expect(responseJson.message).to.eql(`Empleado con ID: ${requestedId} no existe!`);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bb602944-4e1d-4862-b713-737ae3fb4bc7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/people/employees/{{entityId}}"
									},
									"response": []
								},
								{
									"name": "GetAllEmployeesResponse200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffa91204-b73d-4632-bfaf-599e68152ff1",
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
													"    ",
													"    responseData.forEach(employee => {",
													"        pm.expect(employee).to.have.all.keys('firstName', 'lastName', 'birthDate', 'email', 'phone', 'address', 'zipCode', 'employeeId');",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Email is in a valid format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
													"    responseData.forEach(function(employee) {",
													"        pm.expect(employee.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"EmployeeId is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    responseData.forEach(function(employee) {",
													"        pm.expect(employee.employeeId).to.be.a('number').and.to.be.at.least(0, \"EmployeeId should be a non-negative integer\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "fba27313-eaab-4ceb-bc1a-f56017893ea2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/people/employees"
									},
									"response": []
								},
								{
									"name": "CreateEmployeeResponse201",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56359429-cd21-4e83-9ee9-487578b70631",
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.expect(pm.response.code).to.eql(201);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('employeeId').that.is.a('number');",
													"});",
													"",
													"pm.test(\"Employee ID is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.employeeId).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
													"});",
													"",
													"",
													"pm.test(\"Response Content-Type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ef6a4a5-ed3c-456f-82fc-dd0c6ce91cb7",
												"exec": [
													"let entityDiffEmailCurrentNumber = parseInt(pm.environment.get(\"entityDiffEmail\")); // Convert to integer",
													"if (isNaN(entityDiffEmailCurrentNumber)) {",
													"    console.warn(\"entityDiffEmail was not a number.\");",
													"}",
													"pm.environment.set(\"entityDiffEmail\", entityDiffEmailCurrentNumber + 1);",
													"",
													"let entityDiffPhonenumberCurrentNumber = parseInt(pm.environment.get(\"entityDiffPhonenumber\")); // Convert to integer",
													"if (isNaN(entityDiffPhonenumberCurrentNumber)) {",
													"    console.warn(\"entityDiffPhonenumber was not a number.\");",
													"}",
													"pm.environment.set(\"entityDiffPhonenumber\", entityDiffPhonenumberCurrentNumber + 1);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7b6ee3b9-d829-4a6b-926b-9bcfca9f7cf0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"David\",\n  \"lastName\": \"martinez\",\n  \"birthDate\": \"2000-01-15\",\n  \"email\": \"david.martinez{{entityDiffEmail}}@example.com\",\n  \"phone\": \"666-456-{{entityDiffPhonenumber}}\",\n  \"address\": \"123 Main St\",\n  \"zipCode\": \"12345\",\n  \"employeeAuth\": {\n    \"employeeType\": \"Full-time\",\n    \"usernameToken\": \"john.doe\",\n    \"passwordToken\": \"securePassword\",\n    \"role\": \"CSR\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/helpdesk/people/employees"
									},
									"response": []
								},
								{
									"name": "CreateEmployeeResponse400DuplicateEmail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56359429-cd21-4e83-9ee9-487578b70631",
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.eql(400);",
													"});",
													"",
													"",
													"pm.test(\"Response has a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message');",
													"    pm.expect(responseData.message).to.eql(\"Error, valor enviado en campo correo electronico ya esta registrado\")",
													"});",
													"",
													"",
													"pm.test(\"Message must be a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response schema is valid\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.all.keys('message');",
													"    pm.expect(responseData.message).to.be.a('string');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ef6a4a5-ed3c-456f-82fc-dd0c6ce91cb7",
												"exec": [
													"// Increment employeeDiffPhonenumber by 1 each time the request is made.",
													"",
													"let currentNumber = parseInt(pm.environment.get(\"entityDiffPhonenumber\")); // Convert to integer",
													"if (isNaN(currentNumber)) {",
													"    console.warn(\"entityDiffPhonenumber was not a number.\");",
													"}",
													"pm.environment.set(\"entityDiffPhonenumber\", currentNumber + 1);",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8e6c0082-2cf1-4b26-a4e4-88c7c151b751",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Johnson\",\n  \"birthDate\": \"1990-05-15\",\n  \"email\": \"alice.j@example.com\",\n  \"phone\": \"123-456-{{entityDiffPhonenumber}}\",\n  \"address\": \"123 Main St\",\n  \"zipCode\": \"12345\",\n  \"skills\": \"Not specified\", \n  \"profilePicture\": \"\", \n  \"employeeAuth\": {\n    \"employeeType\": \"Full-time\",\n    \"usernameToken\": \"alice.johnson\",\n    \"passwordToken\": \"securePass\",\n    \"role\": \"USER\" \n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/helpdesk/people/employees"
									},
									"response": []
								},
								{
									"name": "CreateEmployeeResponse400DuplicatePhoneNumber",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56359429-cd21-4e83-9ee9-487578b70631",
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.eql(400);",
													"});",
													"",
													"",
													"pm.test(\"Response has a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message');",
													"    pm.expect(responseData.message).to.eql(\"Error, valor enviado en campo numero de celular ya esta registrado\")",
													"",
													"});",
													"",
													"",
													"pm.test(\"Message must be a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response schema is valid\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.all.keys('message');",
													"    pm.expect(responseData.message).to.be.a('string');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ef6a4a5-ed3c-456f-82fc-dd0c6ce91cb7",
												"exec": [
													"// Increment employeeDiffEmail by 1 each time the request is made.",
													"",
													"let currentNumber = parseInt(pm.environment.get(\"entityDiffEmail\")); // Convert to integer",
													"if (isNaN(currentNumber)) {",
													"    console.warn(\"entityDiffEmail was not a number\");",
													"}",
													"pm.environment.set(\"entityDiffEmail\", currentNumber + 1);",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f8d2a5a1-e30e-4f00-82b2-679c1e31f769",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Johnson\",\n  \"birthDate\": \"1990-05-15\",\n  \"email\": \"alice.j{{entityDiffEmail}}@example.com\",\n  \"phone\": \"123-456-7890\",\n  \"address\": \"123 Main St\",\n  \"zipCode\": \"12345\",\n  \"skills\": \"Not specified\", \n  \"profilePicture\": \"\", \n  \"employeeAuth\": {\n    \"employeeType\": \"Full-time\",\n    \"usernameToken\": \"alice.johnson\",\n    \"passwordToken\": \"securePass\",\n    \"role\": \"USER\" \n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:8080/helpdesk/people/employees"
									},
									"response": []
								},
								{
									"name": "DeleteEmployeeResponse204",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0d226282-b726-4474-935a-4bb0af64cbe6",
												"exec": [
													"// Pre-request Script for DELETE /people/employees/{{employeeIdToDelete}}",
													"",
													"// --- Configuration ---",
													"// Adjust the path to your employee creation endpoint",
													"const CREATE_EMPLOYEE_URL = pm.environment.get(\"baseUrl\") + \"/people/employees\";",
													"// Assume the Authorization header is set at collection/folder level, or set it here too if needed",
													"const AUTH_TOKEN = pm.environment.get(\"authToken\");",
													"",
													"// --- Generate Unique Employee Data ---",
													"// Use a timestamp to ensure uniqueness for email and phone",
													"const timestamp = Date.now();",
													"const uniqueEmail = `delete_test_employee_${timestamp}@example.com`;",
													"const uniquePhone = `999-000-${timestamp.toString().slice(-4)}`; // Last 4 digits of timestamp",
													"",
													"const employeeData = {",
													"  \"firstName\": \"Delete\",",
													"  \"lastName\": \"Testuser\",",
													"  \"birthDate\": \"2000-01-01\",",
													"  \"email\": uniqueEmail,",
													"  \"phone\": uniquePhone,",
													"  \"address\": \"123 Delete Rd\",",
													"  \"zipCode\": \"00000\",",
													"  \"skills\": \"Temporary Delete User\",",
													"  \"profilePicture\": \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=\", // Minimal Base64",
													"  \"employeeAuth\": {",
													"    \"employeeType\": \"Contract\",",
													"    \"usernameToken\": `delete_test_${timestamp}`,",
													"    \"passwordToken\": \"DeletePass123\", // Needs to be hashed by backend",
													"    \"role\": \"USER\"",
													"  }",
													"};",
													"",
													"// --- Make the POST request to create the employee ---",
													"pm.sendRequest({",
													"    url: CREATE_EMPLOYEE_URL,",
													"    method: 'POST',",
													"    header: {",
													"        'Content-Type': 'application/json',",
													"        'Authorization': `Bearer ${AUTH_TOKEN}`",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify(employeeData)",
													"    }",
													"}, function (err, res) { // <-- The 'res' here holds the response of the internal POST",
													"    if (err) {",
													"        console.error(\"Pre-request: Network/Request Error during employee creation: \", err);",
													"        pm.test(\"Pre-request: Employee creation failed (network/request error)\", false);",
													"    } else {",
													"        // --- CRITICAL DEBUGGING LINES ---",
													"        console.log(\"Pre-request: Employee creation response status code:\", res.code);",
													"        console.log(\"Pre-request: Employee creation response body:\", res.json()); // Log the body",
													"        // --- END CRITICAL DEBUGGING LINES ---",
													"",
													"        if (res.code === 201) { // Check for successful creation (201 Created)",
													"            const createdEmployeeJson = res.json();",
													"",
													"            // Check if employeeId was returned",
													"            if (createdEmployeeJson && typeof createdEmployeeJson.employeeId === 'number') {",
													"                const entityIdToDelete = createdEmployeeJson.employeeId;",
													"                pm.environment.set(\"entityIdToDelete\", entityIdToDelete);",
													"                console.log(`Pre-request: Created employee with ID ${entityIdToDelete} for deletion.`);",
													"                pm.test(\"Pre-request: Employee creation successful (201)\", true); // Mark success",
													"            } else {",
													"                console.error(\"Pre-request: Employee creation succeeded (201) but missing employeeId in response.\");",
													"                pm.test(\"Pre-request: Employee creation failed (missing ID)\", false);",
													"            }",
													"        } else {",
													"            console.error(`Pre-request: Employee creation failed with status ${res.code}. Response:`, res.json());",
													"            pm.test(\"Pre-request: Employee creation failed for delete test\", false); // Original failure message",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bf12c01a-ac14-461b-a12d-3cd24bc891e1",
												"exec": [
													"pm.test(\"Response status code is 204\", function () {",
													"    pm.expect(pm.response.code).to.eql(204);",
													"});",
													"",
													"",
													"pm.test(\"Response has no content for successful DELETE request\", function () {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"    pm.expect(pm.response.text()).to.be.empty;",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test(\"Response body should be empty for DELETE request\", function () {",
													"    pm.expect(pm.response.text()).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "11559ab0-eec8-49bd-94e1-98bcffdd9551",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "http://localhost:8080/helpdesk/people/employees/{{entityIdToDelete}}"
									},
									"response": []
								},
								{
									"name": "DeleteEmployeeResponse404",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0d226282-b726-4474-935a-4bb0af64cbe6",
												"exec": [
													"// Pre-request Script for DELETE /people/employees/{{employeeIdToDelete}}",
													"//set the employeeIdToDelete to 0 to delete the employee with id 0 which doesnt exists",
													"pm.environment.set(\"entityIdToDelete\", 0);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bf12c01a-ac14-461b-a12d-3cd24bc891e1",
												"exec": [
													"// Post-response Tests for 'DELETE Employee by ID - 404 Not Found'",
													"",
													"// Test 1: Verify Status Code is 404",
													"pm.test(\"Status code is 404 Not Found\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"// Test 2: Verify Response is JSON",
													"pm.test(\"Response is JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"// Test 3: Verify Response body matches ErrorResponseDTO structure",
													"pm.test(\"Response body matches ErrorResponseDTO structure\", function () {",
													"    const responseJson = pm.response.json();",
													"    const requestedId = pm.environment.get(\"entityIdToDelete\");",
													"",
													"    pm.expect(responseJson).to.be.an('object', 'Error response should be an object');",
													"    pm.expect(responseJson).to.have.property('message').and.to.be.a('string', 'Error message should be a string');",
													"",
													"    // Optional: Assert on specific error message content for 404",
													"    // Or if your API is very specific:",
													"     pm.expect(responseJson.message).to.eql(`Empleado con ID: ${requestedId} no existe!`);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "51d0c4c4-9bcf-4d8e-ae79-3d98e4c41447",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "http://localhost:8080/helpdesk/people/employees/{{entityIdToDelete}}"
									},
									"response": []
								},
								{
									"name": "DeleteEmployeeResponse400DeletionNotAllowed",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0d226282-b726-4474-935a-4bb0af64cbe6",
												"exec": [
													"// Pre-request Script for DELETE /people/employees/{{employeeIdToDelete}}",
													"//set the employeeIdToDelete to 0 to delete the employee with id 0 which doesnt exists",
													"pm.environment.set(\"entityIdToDelete\", 1);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bf12c01a-ac14-461b-a12d-3cd24bc891e1",
												"exec": [
													"// Post-response Tests for 'DELETE Employee by ID - 404 Not Found'",
													"",
													"// Test 1: Verify Status Code is 404",
													"pm.test(\"Status code is 400 Deletion not allowed\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Test 2: Verify Response is JSON",
													"pm.test(\"Response is JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"// Test 3: Verify Response body matches ErrorResponseDTO structure",
													"pm.test(\"Response body matches ErrorResponseDTO structure\", function () {",
													"    const responseJson = pm.response.json();",
													"    const requestedId = pm.environment.get(\"entityIdToDelete\");",
													"",
													"    pm.expect(responseJson).to.be.an('object', 'Error response should be an object');",
													"    pm.expect(responseJson).to.have.property('message').and.to.be.a('string', 'Error message should be a string');",
													"",
													"    // Optional: Assert on specific error message content for 404",
													"    // Or if your API is very specific:",
													"     pm.expect(responseJson.message).to.eql(\"Eliminacion de Empleado no esta permitida! dicha accion corromperia los datos de la organizacion\");",
													"});",
													"",
													"pm.test(\"Response error message matches expected message\", function () {",
													"    const responseJson = pm.response.json();",
													"     pm.expect(responseJson.message).to.eql(\"Eliminacion de Empleado no esta permitida! dicha accion corromperia los datos de la organizacion\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "36446df9-5b73-4036-b083-8972449c6fd5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "http://localhost:8080/helpdesk/people/employees/{{entityIdToDelete}}"
									},
									"response": []
								}
							],
							"id": "91241a62-1d1f-4cd8-bbda-a7081442e969"
						}
					],
					"id": "49ddfea3-3e8b-41b8-9c76-480c9aaba92b"
				},
				{
					"name": "security",
					"item": [
						{
							"name": "check endpoints",
							"id": "6d2df5fb-dd28-4044-bbe2-58f107bcd40a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:8080/helpdesk/actuator/mappings"
							},
							"response": []
						},
						{
							"name": "loginInternalResponse400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8dd18529-b65e-407b-ade9-1de35373c8b8",
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"});",
											"",
											"",
											"pm.test(\"Response contains a message field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Response matches the expected schema format\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('message');",
											"    pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"pm.test(\"response message should match expected\", function(){",
											"    const responseData = pm.response.json();",
											"    const expectedMessage = \"nombre de usuario o contraseña no son validos\";",
											"    pm.expect(responseData.message).to.eql(expectedMessage);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b0d75462-41a1-4d0c-92fa-f08ca63353ad",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c4a0aa71-dd37-4e5d-a924-de69fa35f8a4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user11111111\",\n    \"password\": \"pass11111111\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/helpdesk/security/login/internal"
							},
							"response": []
						}
					],
					"id": "ad54926e-dd3d-4628-8504-483cd34c60d2"
				},
				{
					"name": "Coordination",
					"item": [
						{
							"name": "Course",
							"item": [
								{
									"name": "CreateCourseResponse400ScheduleConflict",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2587195-8bac-4bc2-89ea-4e1707117ae6",
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object').that.has.property('message');",
													"});",
													"",
													"",
													"pm.test(\"The message field must be a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Response conforms to the expected schema\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
													"});",
													"",
													"pm.test(\"Response body contains the expected message\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.message).to.be.eql(\"El horario del curso conflictua con uno o mas cursos existentes: Creative Writing\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dd5674a-6e6d-4a8f-a421-18ed5c94c7dd",
												"exec": [
													"pm.environment.set(\"schedule\", 5); // Set the schedule to an occupied one"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "95998b53-f667-48cb-97af-6e04376a553d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Advanced Sculpture\",\n  \"description\": \"Exploration of modern sculpture techniques and materials.\",\n  \"maxCapacity\": 15,\n  \"timeTableIds\": [1, {{schedule}}, 8],\n  \"availableInstructorIds\": [2, 7]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/coordination/courses"
									},
									"response": []
								},
								{
									"name": "CreateCourseResponse400ScheduleNotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2587195-8bac-4bc2-89ea-4e1707117ae6",
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object').that.has.property('message');",
													"});",
													"",
													"",
													"pm.test(\"The message field must be a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Response conforms to the expected schema\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
													"});",
													"",
													"pm.test(\"Response body contains the expected message\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.message).to.be.eql(\"El horario del curso conflictua con uno o mas cursos existentes: Creative Writing\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dd5674a-6e6d-4a8f-a421-18ed5c94c7dd",
												"exec": [
													"pm.environment.set(\"schedule\", 5); // Set the schedule to an occupied one"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "76f937c9-73d3-4b46-ad93-943759527c16",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Advanced Sculpture\",\n  \"description\": \"Exploration of modern sculpture techniques and materials.\",\n  \"maxCapacity\": 15,\n  \"timeTableIds\": [1, {{schedule}}, 8],\n  \"availableInstructorIds\": [2, 7]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/coordination/courses"
									},
									"response": []
								},
								{
									"name": "CreateCourseResponse400CollaboratorNotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2587195-8bac-4bc2-89ea-4e1707117ae6",
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has a message field\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object').that.has.property('message');",
													"});",
													"",
													"",
													"pm.test(\"The message field must be a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Response conforms to the expected schema\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
													"});",
													"",
													"pm.test(\"The message field contains the expected error message\", function () {",
													"    const responseData = pm.response.json();",
													"    const collaborador = pm.environment.get(\"collaborator\");",
													"    pm.expect(responseData.message).to.be.eql(`El curso a registrar tiene un colaborador asignado con ID: ${collaborador}, no existente!`);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dd5674a-6e6d-4a8f-a421-18ed5c94c7dd",
												"exec": [
													"pm.environment.set(\"schedule\", 1); // Set the schedule to an occupied one",
													"pm.environment.set(\"collaborator\", 0); // Set the collaborator to a non existing one"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "17bf6c73-6dd4-4232-a220-b8a557a1b6cc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Advanced Sculpture\",\n  \"description\": \"Exploration of modern sculpture techniques and materials.\",\n  \"maxCapacity\": 15,\n  \"timeTableIds\": [1, 2, 8],\n  \"availableCollaboratorIds\": [{{collaborator}}, 7]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/coordination/courses"
									},
									"response": []
								}
							],
							"id": "dcb2bec3-9804-4e12-bae1-b38846a27ef1"
						}
					],
					"id": "3c1bed4e-ae9b-478f-9985-f5c96bead0b7"
				},
				{
					"name": "loginInternalResponse200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8dd18529-b65e-407b-ade9-1de35373c8b8",
								"exec": [
									"// Ensure the request was successful (HTTP Status 200 OK)",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response body is JSON",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Parse the JSON response",
									"const responseData = pm.response.json();",
									"",
									"// Check if the 'token' property exists in the response",
									"pm.test(\"Response has 'token' property\", function () {",
									"    pm.expect(responseData).to.have.property('token');",
									"});",
									"",
									"// Store the token in an environment variable",
									"if (responseData && responseData.token) {",
									"    // Set the environment variable 'authToken'",
									"    pm.environment.set(\"authToken\", responseData.token);",
									"    console.log(\"Authentication Token stored: \" + responseData.token.substring(0, 20) + \"...\"); // Log a snippet",
									"} else {",
									"    console.error(\"Could not find 'token' in the response.\");",
									"    pm.test(\"Token was not found in response\", false); // Fail the test if token is missing",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"id": "9c5f958e-6806-4143-b1d5-af8820618fba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"pass1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/helpdesk/security/login/internal"
					},
					"response": []
				}
			],
			"id": "9fa54deb-1708-411b-a188-ed4a2eeabfb9",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b056df68-1618-4b71-993b-f82548215f31",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2ada4088-b4da-40c4-af09-a6602d7a3cf5",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{authToken}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "fb7eaf3e-3abc-40a9-afb7-51450474db25",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "418d7d10-091a-40a1-83ae-5d553515ad0d",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}